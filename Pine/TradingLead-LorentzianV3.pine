//@version=5
indicator("TradingLead3 Lorentzian Classification", overlay = true, max_lines_count=500, max_labels_count=500)

// in this version V3, just cleaned up the code, however more cleaning and testing is required.
// ------------------ Constants and Inputs -------------------
INITIALCAPITAL = 100000
qty_type                = "Percent"
qty                     = 100
dayFactor = (60*60*24*1000)
smallSplitter = "--------"

startDate = input.time(timestamp("2015-01-01"), title="Start Date")
endDate = input.time(timestamp("2023-12-31"), title="End Date")
withinTime = time >= startDate and time <= endDate
doLongs = input.bool(defval=true, title="Do Longs")
doShorts = input.bool(defval=false, title="Do Shorts")
showTradeLabels = input.bool(defval=false, title="Show Each Trade Label")
showDashboard = input.bool(defval=true, title="Show  Dashboard")
showTradeArraws = input.bool(defval=true, title="Show  Trade Arrows")
showStoplosses = input.bool(defval=false, title="Show Stop Losses")

// ------------------- Trade Management -----------------------
var float currentTradeProfit     = na
var float openProfit    = na
var float equity        = INITIALCAPITAL + nz(currentTradeProfit) + nz(openProfit)
var int exitBar = na
var float exitPrice = na

var int exitTime = na
var float initialPrice = na
var int initialTime = na
var float buyAndHoldProfit = na
var float buyAndHoldPercentProfit = na
var float maxDownSideOverall = 0.0
var float minTradeSize = INITIALCAPITAL

tradeSize               = (qty / 100.0) * (equity - nz(openProfit))
minTradeSize := math.min(tradeSize, minTradeSize)

maxDownSideOverall := math.max(maxDownSideOverall, INITIALCAPITAL - minTradeSize)

var float buyPositionSize  = na 
var float buyEntryPrice = na
var int buyEntryBar        = na
var int buyEntryTime = na
var float buyStopLoss = na

var float sellEntryPrice = na
var int sellEntryBar = na
var int sellEntryTime = na
var float sellStopLoss = na
var float sellPositionSize = na

var float entryPrice = na
var int entryBar = na
var int entryTime = na
var float positionSize = na


// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
// ------------------ Indicators and Calculations -------------------
import jdehorty/MLExtensions/2 as ml
import jdehorty/KernelFunctions/2 as kernels

type Settings
    float source
    int neighborsCount
    int maxBarsBack
    int featureCount
    int colorCompression
    bool showExits
    bool useDynamicExits

type Label
    int long
    int short
    int neutral

type FeatureArrays
    array<float> f1
    array<float> f2
    array<float> f3
    array<float> f4
    array<float> f5

type FeatureSeries
    float f1
    float f2
    float f3
    float f4
    float f5

type MLModel
    int firstBarIndex
    array<int> trainingLabels
    int loopSize
    float lastDistance
    array<float> distancesArray
    array<int> predictionsArray
    int prediction

type FilterSettings 
    bool useVolatilityFilter
    bool useRegimeFilter
    bool useAdxFilter
    float regimeThreshold
    int adxThreshold

type Filter
    bool volatility
    bool regime
    bool adx 

// ==========================
// ==== Helper Functions ====
// ==========================

series_from(feature_string, _close, _high, _low, _hlc3, f_paramA, f_paramB) =>
    switch feature_string
        "RSI" => ml.n_rsi(_close, f_paramA, f_paramB)
        "WT" => ml.n_wt(_hlc3, f_paramA, f_paramB)
        "CCI" => ml.n_cci(_close, f_paramA, f_paramB)
        "ADX" => ml.n_adx(_high, _low, _close, f_paramA)

get_lorentzian_distance(int i, int featureCount, FeatureSeries featureSeries, FeatureArrays featureArrays) =>
    switch featureCount
        5 => math.log(1+math.abs(featureSeries.f1 - array.get(featureArrays.f1, i))) + 
             math.log(1+math.abs(featureSeries.f2 - array.get(featureArrays.f2, i))) + 
             math.log(1+math.abs(featureSeries.f3 - array.get(featureArrays.f3, i))) + 
             math.log(1+math.abs(featureSeries.f4 - array.get(featureArrays.f4, i))) + 
             math.log(1+math.abs(featureSeries.f5 - array.get(featureArrays.f5, i)))
        4 => math.log(1+math.abs(featureSeries.f1 - array.get(featureArrays.f1, i))) +
             math.log(1+math.abs(featureSeries.f2 - array.get(featureArrays.f2, i))) +
             math.log(1+math.abs(featureSeries.f3 - array.get(featureArrays.f3, i))) +
             math.log(1+math.abs(featureSeries.f4 - array.get(featureArrays.f4, i)))
        3 => math.log(1+math.abs(featureSeries.f1 - array.get(featureArrays.f1, i))) +
             math.log(1+math.abs(featureSeries.f2 - array.get(featureArrays.f2, i))) +
             math.log(1+math.abs(featureSeries.f3 - array.get(featureArrays.f3, i)))
        2 => math.log(1+math.abs(featureSeries.f1 - array.get(featureArrays.f1, i))) +
             math.log(1+math.abs(featureSeries.f2 - array.get(featureArrays.f2, i)))

// ================  
// ==== Inputs ==== 
// ================ 

// Settings Object: General User-Defined Inputs
Settings settings = 
 Settings.new(
   input.source(title='Source', defval=close, group="General Settings", tooltip="Source of the input data"),
   input.int(title='Neighbors Count', defval=8, group="General Settings", minval=1, maxval=100, step=1, tooltip="Number of neighbors to consider"),
   input.int(title="Max Bars Back", defval=2000, group="General Settings"),
   input.int(title="Feature Count", defval=5, group="Feature Engineering", minval=2, maxval=5, tooltip="Number of features to use for ML predictions."),
   input.int(title="Color Compression", defval=1, group="General Settings", minval=1, maxval=10, tooltip="Compression factor for adjusting the intensity of the color scale."),
   input.bool(title="Show Default Exits", defval=false, group="General Settings", tooltip="Default exits occur exactly 4 bars after an entry signal. This corresponds to the predefined length of a trade during the model's training process.", inline="exits"),
   input.bool(title="Use Dynamic Exits", defval=false, group="General Settings", tooltip="Dynamic exits attempt to let profits ride by dynamically adjusting the exit threshold based on kernel regression logic.", inline="exits")
 )
   
// Settings object for user-defined settings
FilterSettings filterSettings =
 FilterSettings.new(
   input.bool(title="Use Volatility Filter", defval=true, tooltip="Whether to use the volatility filter.", group="Filters"),
   input.bool(title="Use Regime Filter", defval=true, group="Filters", inline="regime"),
   input.bool(title="Use ADX Filter", defval=false, group="Filters", inline="adx"),
   input.float(title="Threshold", defval=-0.1, minval=-10, maxval=10, step=0.1, tooltip="Whether to use the trend detection filter. Threshold for detecting Trending/Ranging markets.", group="Filters", inline="regime"),
   input.int(title="Threshold", defval=20, minval=0, maxval=100, step=1, tooltip="Whether to use the ADX filter. Threshold for detecting Trending/Ranging markets.", group="Filters", inline="adx")
 )

// Filter object for filtering the ML predictions
Filter filter =
 Filter.new(
   ml.filter_volatility(1, 10, filterSettings.useVolatilityFilter), 
   ml.regime_filter(ohlc4, filterSettings.regimeThreshold, filterSettings.useRegimeFilter),
   ml.filter_adx(settings.source, 14, filterSettings.adxThreshold, filterSettings.useAdxFilter)
  )

// Feature Variables: User-Defined Inputs for calculating Feature Series. 
f1_string = input.string(title="Feature 1", options=["RSI", "WT", "CCI", "ADX"], defval="RSI", inline = "01", tooltip="The first feature to use for ML predictions.", group="Feature Engineering")
f1_paramA = input.int(title="Parameter A", tooltip="The primary parameter of feature 1.", defval=14, inline = "02", group="Feature Engineering")
f1_paramB = input.int(title="Parameter B", tooltip="The secondary parameter of feature 2 (if applicable).", defval=1, inline = "02", group="Feature Engineering")
f2_string = input.string(title="Feature 2", options=["RSI", "WT", "CCI", "ADX"], defval="WT", inline = "03", tooltip="The second feature to use for ML predictions.", group="Feature Engineering")
f2_paramA = input.int(title="Parameter A", tooltip="The primary parameter of feature 2.", defval=10, inline = "04", group="Feature Engineering")
f2_paramB = input.int(title="Parameter B", tooltip="The secondary parameter of feature 2 (if applicable).", defval=11, inline = "04", group="Feature Engineering")
f3_string = input.string(title="Feature 3", options=["RSI", "WT", "CCI", "ADX"], defval="CCI", inline = "05", tooltip="The third feature to use for ML predictions.", group="Feature Engineering")
f3_paramA = input.int(title="Parameter A", tooltip="The primary parameter of feature 3.", defval=20, inline = "06", group="Feature Engineering")
f3_paramB = input.int(title="Parameter B", tooltip="The secondary parameter of feature 3 (if applicable).", defval=1, inline = "06", group="Feature Engineering")
f4_string = input.string(title="Feature 4", options=["RSI", "WT", "CCI", "ADX"], defval="ADX", inline = "07", tooltip="The fourth feature to use for ML predictions.", group="Feature Engineering")
f4_paramA = input.int(title="Parameter A", tooltip="The primary parameter of feature 4.", defval=20, inline = "08", group="Feature Engineering")
f4_paramB = input.int(title="Parameter B", tooltip="The secondary parameter of feature 4 (if applicable).", defval=2, inline = "08", group="Feature Engineering")
f5_string = input.string(title="Feature 5", options=["RSI", "WT", "CCI", "ADX"], defval="RSI", inline = "09", tooltip="The fifth feature to use for ML predictions.", group="Feature Engineering")
f5_paramA = input.int(title="Parameter A", tooltip="The primary parameter of feature 5.", defval=9, inline = "10", group="Feature Engineering")
f5_paramB = input.int(title="Parameter B", tooltip="The secondary parameter of feature 5 (if applicable).", defval=1, inline = "10", group="Feature Engineering")

// FeatureSeries Object: Calculated Feature Series based on Feature Variables
featureSeries = 
 FeatureSeries.new(
   series_from(f1_string, close, high, low, hlc3, f1_paramA, f1_paramB), // f1
   series_from(f2_string, close, high, low, hlc3, f2_paramA, f2_paramB), // f2 
   series_from(f3_string, close, high, low, hlc3, f3_paramA, f3_paramB), // f3
   series_from(f4_string, close, high, low, hlc3, f4_paramA, f4_paramB), // f4
   series_from(f5_string, close, high, low, hlc3, f5_paramA, f5_paramB)  // f5
 )

// FeatureArrays Variables: Storage of Feature Series as Feature Arrays Optimized for ML
// Note: These arrays cannot be dynamically created within the FeatureArrays Object Initialization and thus must be set-up in advance.
var f1Array = array.new_float()
var f2Array = array.new_float()
var f3Array = array.new_float()
var f4Array = array.new_float()
var f5Array = array.new_float()
array.push(f1Array, featureSeries.f1)
array.push(f2Array, featureSeries.f2)
array.push(f3Array, featureSeries.f3)
array.push(f4Array, featureSeries.f4)
array.push(f5Array, featureSeries.f5)

// FeatureArrays Object: Storage of the calculated FeatureArrays into a single object
featureArrays = 
 FeatureArrays.new(
  f1Array, // f1
  f2Array, // f2
  f3Array, // f3
  f4Array, // f4
  f5Array  // f5
 )

// Label Object: Used for classifying historical data as training data for the ML Model
Label direction = 
 Label.new(
   long=1, 
   short=-1, 
   neutral=0
  )

// Derived from General Settings
maxBarsBackIndex = last_bar_index >= settings.maxBarsBack ? last_bar_index - settings.maxBarsBack : 0

// Nadaraya-Watson Kernel Regression Settings
h = input.int(8, 'Lookback Window', minval=3, tooltip='The number of bars used for the estimation. This is a sliding value that represents the most recent historical bars. Recommended range: 3-50', group="Kernel Settings", inline="kernel")
r = input.float(8., 'Relative Weighting', step=0.25, tooltip='Relative weighting of time frames. As this value approaches zero, the longer time frames will exert more influence on the estimation. As this value approaches infinity, the behavior of the Rational Quadratic Kernel will become identical to the Gaussian kernel. Recommended range: 0.25-25', group="Kernel Settings", inline="kernel")
x = input.int(25, "Regression Level", tooltip='Bar index on which to start regression. Controls how tightly fit the kernel estimate is to the data. Smaller values are a tighter fit. Larger values are a looser fit. Recommended range: 2-25', group="Kernel Settings", inline="kernel")
lag = input.int(2, "Lag", tooltip="Lag for crossover detection. Lower values result in earlier crossovers. Recommended range: 1-2", inline='1', group='Kernel Settings')

// Display Settings
showBarColors = input.bool(true, "Show Bar Colors", tooltip="Whether to show the bar colors.", group="Display Settings")
showBarPredictions = input.bool(defval = true, title = "Show Bar Prediction Values", tooltip = "Will show the ML model's evaluation of each bar as an integer.", group="Display Settings")
useAtrOffset = input.bool(defval = false, title = "Use ATR Offset", tooltip = "Will use the ATR offset instead of the bar prediction offset.", group="Display Settings")
barPredictionsOffset = input.float(0, "Bar Prediction Offset", minval=0, tooltip="The offset of the bar predictions as a percentage from the bar high or close.", group="Display Settings")

// =================================
// ==== Next Bar Classification ====
// =================================

// This model specializes specifically in predicting the direction of price action over the course of the next 4 bars. 
// To avoid complications with the ML model, this value is hardcoded to 4 bars but support for other training lengths may be added in the future.
src = settings.source
y_train_series = src[4] < src[0] ? direction.short : src[4] > src[0] ? direction.long : direction.neutral
var y_train_array = array.new_int(0)

// Variables used for ML Logic
var predictions = array.new_float(0)
var prediction = 0.
var signal = direction.neutral
var distances = array.new_float(0)

array.push(y_train_array, y_train_series)

// =========================
// ====  Core ML Logic  ====
// =========================

lastDistance = -1.0
size = math.min(settings.maxBarsBack-1, array.size(y_train_array)-1)
sizeLoop = math.min(settings.maxBarsBack-1, size)

if bar_index >= maxBarsBackIndex //{
    for i = 0 to sizeLoop //{
        d = get_lorentzian_distance(i, settings.featureCount, featureSeries, featureArrays) 
        if d >= lastDistance and i%4 //{
            lastDistance := d            
            array.push(distances, d)
            array.push(predictions, math.round(array.get(y_train_array, i)))
            if array.size(predictions) > settings.neighborsCount //{
                lastDistance := array.get(distances, math.round(settings.neighborsCount*3/4))
                array.shift(distances)
                array.shift(predictions)
            //}
        //}
    //}
    prediction := array.sum(predictions)

filter_all = filter.volatility and filter.regime and filter.adx

// Filtered Signal: The model's prediction of future price movement direction with user-defined filters applied
signal := prediction > 0 and filter_all ? direction.long : prediction < 0 and filter_all ? direction.short : nz(signal[1])

isEarlySignalFlip = ta.change(signal) and (ta.change(signal[1]) or ta.change(signal[2]) or ta.change(signal[3]) or ta.change(signal[4]))

// Kernel Regression Filters: Filters based on Nadaraya-Watson Kernel Regression using the Rational Quadratic Kernel
// For more information on this technique refer to my other open source indicator located here: 
// https://www.tradingview.com/script/AWNvbPRM-Nadaraya-Watson-Rational-Quadratic-Kernel-Non-Repainting/
c_green = color.new(#009988, 20)
c_red = color.new(#CC3311, 20)
transparent = color.new(#000000, 100)
yhat1 = kernels.rationalQuadratic(settings.source, h, r, x)
kernelEstimate = yhat1
// Kernel Rates of Change
bool isBearishRate = yhat1[1] > yhat1
bool isBullishRate = yhat1[1] < yhat1
// Kernel Crossovers
color colorByRate = isBullishRate ? c_green : c_red
plot(kernelEstimate, color=colorByRate, linewidth=2, title="Kernel Regression Estimate")

isBullish = isBullishRate
isBearish =  isBearishRate

// ===========================
// ==== Entries and Exits ====
// ===========================
goLong = doLongs and isBullish and (not isEarlySignalFlip) 
goShort = doShorts and isBearish and (not isEarlySignalFlip)

// --------- ----------------- ----------------- ----------------- --------------
// --------- ----------------- ----------------- ----------------- --------------
// ---------- Following need to be calculated based on the logic ----------------
// --------- ----------------- ----------------- ----------------- --------------
// --------- ----------------- ----------------- ----------------- --------------
buy_signal =  goLong and na(buyPositionSize) and withinTime
sell_signal =  goShort and na(sellPositionSize) and withinTime


exit_buy = ((isBearish and withinTime) or(low<buyStopLoss)) and not na(buyPositionSize)
exit_sell = ((isBullish and withinTime) or (high>sellStopLoss)) and not na(sellPositionSize)

isExiting = exit_buy or exit_sell

if isExiting
    exitPrice := exit_buy ? ( low < buyStopLoss ? math.min(open, buyStopLoss) : close)  : (high > sellStopLoss ? math.max(open, sellStopLoss) : close)

if buy_signal
    buyStopLoss := low

if sell_signal
    sellStopLoss := high

// =========================
// ==== Display Signals ==== 
// =========================

atrSpaced = useAtrOffset ? ta.atr(1) : na
compressionFactor = settings.neighborsCount / settings.colorCompression
c_pred = prediction > 0 ? color.from_gradient(prediction, 0, compressionFactor, #787b86, #009988) : prediction <= 0 ? color.from_gradient(prediction, -compressionFactor, 0, #CC3311, #787b86) : na

barcolor(showBarColors ? color.new(c_pred, 50) : na)

// ===================== 
// ==== Backtesting ====
// =====================



// ------------------- Dashboard Variables --------------------
var int totalTimeBlocked = 0
var int lastTradeTimeBlocked = na

// Dashboard variables
var float bookedProfit = 0.0
var float grossProfit = 0.0  
var float grossLoss = 0.0  
var float percentGrossProfit = 0.0
var float percentGrossLoss = 0.0
var int totalTrades = 0
var float lastTradeProfit = na

var int numWinningTrades = 0
var int numLosingTrades = 0
var float maxDownside = 0.0
var float maxUpside = 0.0
var float currentDownSide = 0.0
var int winStreak = 0
var int loseStreak = 0
var int timeBlockedBuyHold = 0
var float profitFactor = 0.0

var int maxLoseStreak = 0
var int maxWinStreak = 0

// Dashboard Text and Title
var string dashTitle = "Trade Dashboard\n"
splitter = "----------------------------", nl = "\n"

// ------------------- Helper Functions -----------------------

// Function to format numbers with commas
formatWithCommas(x) =>
    rounded = math.round(x, 0)  // Round to 2 decimal places
    s = str.tostring(rounded)
    len = str.length(s)
    formatted = ""
    counter = 0
    for i = len - 1 to 0
        if (counter % 3 == 0 and counter != 0)
            formatted := "," + formatted
        char_at_i = str.substring(s, i, i+1)
        formatted := char_at_i + formatted
        counter := counter + 1
    // Trimming if string is too long
    maxLen = 20  // Set your max length here
    if (str.length(formatted) > maxLen)
        formatted := str.substring(formatted, 0, maxLen-3) + "..."
    formatted


// Initialize Line
f_drawLine(_x1, _y1, _x2, _y2, _col) =>
     _id = line.new(_x1, _y1, _x2, _y2, style=line.style_arrow_right, color=_col, width=2)



// ------------------- Main Execution -------------------------




if isExiting
    exitBar   := bar_index
    exitTime := time
    
    positionSize := exit_buy ? buyPositionSize : sellPositionSize
    entryPrice := exit_buy ? buyEntryPrice : sellEntryPrice
    entryTime := exit_buy ? buyEntryTime : sellEntryTime
    entryBar := exit_buy ? buyEntryBar : sellEntryBar
    

    currentTradeProfit := (positionSize * exitPrice) - (positionSize * entryPrice) 

    if exit_sell
        currentTradeProfit := -currentTradeProfit
    buyStopLoss := na
    sellStopLoss := na
    
    equity    := equity + currentTradeProfit
    lastTradeProfit := math.round(currentTradeProfit, 2)
    bookedProfit := bookedProfit + lastTradeProfit

    
    totalTrades := totalTrades + 1
    lastTradeTimeBlocked := exitTime - entryTime
    timeBlockedBuyHold := exitTime - initialTime
    totalTimeBlocked := totalTimeBlocked + lastTradeTimeBlocked
    
    if currentTradeProfit > 0
        grossProfit:= grossProfit + currentTradeProfit
        numWinningTrades := numWinningTrades + 1
        maxUpside := math.max(maxUpside, currentTradeProfit)
        winStreak := winStreak + 1
        loseStreak := 0
        if winStreak > maxWinStreak
            maxWinStreak := winStreak

    if currentTradeProfit < 0
        grossLoss := math.abs(grossLoss) + math.abs(currentTradeProfit)
        numLosingTrades := numLosingTrades + 1
        maxDownside := math.min(maxDownside, currentTradeProfit)
        loseStreak := loseStreak + 1
        winStreak := 0
        if loseStreak > maxLoseStreak
            maxLoseStreak := loseStreak
    
    if grossLoss > 0
        profitFactor := math.abs(float(grossProfit) / float(grossLoss))


//Calculating buy and hold returns
if withinTime
    
    if (na(initialPrice))
        initialPrice := na(initialPrice) ? close : initialPrice
        initialTime := na(initialTime) ? time : initialTime
        label.new(bar_index, close, yloc=yloc.abovebar, text="Start", color=color.white, size=size.large, textalign =  text.align_left)
    else
        buyAndHoldProfit := (close - initialPrice) * INITIALCAPITAL
        buyAndHoldPercentProfit := ((close - initialPrice) / initialPrice) * 100
    


// ------------------- Draw label for current Trade -------------------------
if not na(currentTradeProfit)
    if(showTradeArraws)
        f_drawLine(entryBar, entryPrice, exitBar, exitPrice, currentTradeProfit > 0 ? color.green : color.red)
    label_color = currentTradeProfit > 0 ? color.green : color.red
    tradePercentProfit = (currentTradeProfit / tradeSize) * 100
    currentTradePercentProfit = str.tostring(math.round(tradePercentProfit, 2)) + "%"  // Round to 2 decimal places and add the % sign

    labelText = ""
    // Append individual lines of text to the label text string
    labelText := labelText + "Profit (%): " + currentTradePercentProfit + nl
    labelText := labelText + "P/L: " + formatWithCommas(currentTradeProfit) + nl
    labelText := labelText + smallSplitter + nl 
    labelText := labelText + "TradeSize: " + formatWithCommas(tradeSize) + nl
    labelText := labelText + "New Capital: " + formatWithCommas(equity) + nl
    labelText := labelText + "Qty (%): " + str.tostring(qty) + nl
    labelText := labelText + "Entry: " + formatWithCommas(entryPrice) + nl
    labelText := labelText + "Exit: " + formatWithCommas(exitPrice) + nl
    labelText := labelText + smallSplitter + nl 
    labelText := labelText + "Blocked Time: " + str.tostring(formatWithCommas(lastTradeTimeBlocked/dayFactor)) + nl
    
    if(showTradeLabels)
        label.new(exitBar, exitPrice, yloc=yloc.abovebar, text=labelText, color=label_color, size=size.small, textalign =  text.align_left)
    

    exitPrice    := na
    exitBar      := na
    currentTradeProfit    := na
    if exit_buy
        buyEntryBar     := na
        buyEntryPrice   := na
        buyPositionSize := na
    else
        sellEntryBar     := na
        sellEntryPrice   := na
        sellPositionSize := na

    // Entry logic
if buy_signal
    buyEntryPrice   := close
    buyEntryBar     := bar_index
    buyEntryTime := time
    buyStopLoss := low
    buyPositionSize := tradeSize / buyEntryPrice

if sell_signal
    sellEntryPrice := close
    sellEntryBar := bar_index
    sellEntryTime := time
    sellStopLoss := high
    sellPositionSize := tradeSize / sellEntryPrice

// The following can be used to stream signals to a backtest adapter
BacktestBuySell = switch 
    buy_signal => 1
    sell_signal => 2
    => 3
BacktestExitLongShort = switch 
    exit_buy => 1
    exit_sell => 2
    => 3

plot(BacktestBuySell, "Backtest: Enter", display=display.none)
plot(BacktestExitLongShort, "Backtest: Exit", display=display.none)

plot(buyStopLoss, title = "Buy StopLoss Line", style=plot.style_steplinebr)
plot(sellStopLoss, color=color.yellow, title = "Sell StopLoss Line", style=plot.style_steplinebr)


// plot(initialTime, title = "initTime", style=plot.style_steplinebr)
// plot(timeBlockedBuyHold, title = "buy n hold time", style=plot.style_steplinebr)
// ------------------- Main Dashboard Creation -------------------------

// Variables for Dashboard
var float percentProfit = 0.0
var totalProfit = 0.0



if not na(buyPositionSize)
    currentTradeProfit := (buyPositionSize * close) - (buyPositionSize * entryPrice) 
    totalProfit := bookedProfit + currentTradeProfit
else
    totalProfit := bookedProfit
percentProfit := ( totalProfit/ INITIALCAPITAL) * 100
percentProfit := math.round(percentProfit, 2)

// plot(totalProfit, title = "Total Profit", style=plot.style_steplinebr, color=color.green)
// plot(bookedProfit, title = "Booked Profit", style=plot.style_steplinebr, color=color.yellow)
// plot(currentTradeProfit, title = "Current Trade Profit", style=plot.style_steplinebr, color=color.red)

// Initialize Table
init_table() =>
    c_transparent = color.new(color.black, 100)
    table.new(position.top_right, columns=2, rows=22, frame_color=color.new(color.black, 100), frame_width=1, border_width=1, border_color=c_transparent)

// Update Table
update_table(tbl) =>
    c_transparent = color.new(color.black, 100)
    // Header
    table.cell(tbl, row= 0,column =  0,text= "Dashboard", text_halign=text.align_center, text_color=color.white, text_size=size.small)
    
    // First Block
    table.cell(tbl, row= 1,column =  0,text= "Init Capital", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 1,column =  1,text= str.tostring(formatWithCommas(INITIALCAPITAL)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 2,column =  0,text= "Cur Capital", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 2,column =  1,text= str.tostring(formatWithCommas(tradeSize)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 3,column =  0,text= "Qty/trade", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 3,column =  1,text= str.tostring(formatWithCommas(qty)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    // Second Block
    table.cell(tbl, row= 4,column =  0,text= "Total Profit", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 4,column =  1,text= str.tostring(formatWithCommas(bookedProfit)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 5,column =  0,text= "Strategy PnL %", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 5,column =  1,text= str.tostring(formatWithCommas(percentProfit)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 6,column =  0,text= "Buy&Hold PnL %", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 6,column =  1,text= str.tostring(formatWithCommas(buyAndHoldPercentProfit)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Third Block
    table.cell(tbl, row= 7,column =  0,text= "Total Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 7,column =  1,text= str.tostring(totalTrades), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 8,column =  0,text= "Num Winning Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 8,column =  1,text= str.tostring(formatWithCommas(numWinningTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 9,column =  0,text= "Num Losing Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 9,column =  1,text= str.tostring(formatWithCommas(numLosingTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 10,column =  0,text= "Accuracy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 10,column =  1,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 11,column =  0,text= str.tostring(formatWithCommas(numLosingTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 11,column =  1,text= "Accuracy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 12,column =  0,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 12,column =  1,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
        // Fourth Block
    table.cell(tbl,row= 11,column= 0,text= "Profit Factor", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 11,column= 1,text= str.tostring(math.round(profitFactor, 2)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 12,column= 0,text= "Gross Profit", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 12,column= 1,text= str.tostring(formatWithCommas(grossProfit)) + " (" + str.tostring(formatWithCommas(100 * (grossProfit / bookedProfit))) + " %)", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 13,column= 0,text= "Gross Loss", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 13,column= 1,text= str.tostring(formatWithCommas(grossLoss)) + " (" + str.tostring(formatWithCommas(100 * (grossLoss / bookedProfit))) + " %)", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Fifth Block
    table.cell(tbl,row= 14,column= 0,text= "Winning Streak", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 14,column= 1,text= str.tostring(formatWithCommas(maxWinStreak)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 15,column= 0,text= "Losing Streak", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 15,column= 1,text= str.tostring(formatWithCommas(maxLoseStreak)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 16,column= 0,text= "Max Loss/Trade", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 16,column= 1,text= str.tostring(formatWithCommas(-1.0*maxDownside)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 17,column= 0,text= "Max Profit/Trade", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 17,column= 1,text= str.tostring(formatWithCommas(maxUpside)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 18,column= 0,text= "Max Downside", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 18,column= 1,text= str.tostring(formatWithCommas(maxDownSideOverall)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Sixth Block
    table.cell(tbl,row= 19,column= 0,text= "TimeBlocked", text_halign=text.align_center, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 20,column= 0,text= "Strategy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 20,column= 1,text= str.tostring(formatWithCommas(totalTimeBlocked / dayFactor)) + " days", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 21,column= 0,text= "Buy&Hold", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 21,column= 1,text= str.tostring(formatWithCommas(timeBlockedBuyHold / dayFactor)) + " days", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

// Create and Update Table
if (barstate.islast and showDashboard)
    tbl = init_table()
    update_table(tbl)