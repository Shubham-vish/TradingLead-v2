//@version=5
indicator("TradingLead4 Simple Kernel Regression", overlay = true, max_lines_count=500, max_labels_count=500)

// in this version V4, Simple kernel is used, however accuracy is almost similar and it is taking slightly less trades
// ------------------ Constants and Inputs -------------------
INITIALCAPITAL = 100000
qty_type                = "Percent"
qty                     = 100
dayFactor = (60*60*24*1000)
smallSplitter = "--------"

startDate = input.time(timestamp("2015-01-01"), title="Start Date")
endDate = input.time(timestamp("2023-12-31"), title="End Date")
withinTime = time >= startDate and time <= endDate
doLongs = input.bool(defval=true, title="Do Longs")
doShorts = input.bool(defval=false, title="Do Shorts")
showTradeLabels = input.bool(defval=false, title="Show Each Trade Label")
showDashboard = input.bool(defval=true, title="Show  Dashboard")
showTradeArraws = input.bool(defval=true, title="Show  Trade Arrows")
showStoplosses = input.bool(defval=false, title="Show Stop Losses")

// ------------------- Trade Management -----------------------
var float currentTradeProfit     = na
var float openProfit    = na
var float equity        = INITIALCAPITAL + nz(currentTradeProfit) + nz(openProfit)
var int exitBar = na
var float exitPrice = na

var int exitTime = na
var float initialPrice = na
var int initialTime = na
var float buyAndHoldProfit = na
var float buyAndHoldPercentProfit = na
var float maxDownSideOverall = 0.0
var float minTradeSize = INITIALCAPITAL

tradeSize               = (qty / 100.0) * (equity - nz(openProfit))
minTradeSize := math.min(tradeSize, minTradeSize)

maxDownSideOverall := math.max(maxDownSideOverall, INITIALCAPITAL - minTradeSize)

var float buyPositionSize  = na 
var float buyEntryPrice = na
var int buyEntryBar        = na
var int buyEntryTime = na
var float buyStopLoss = na

var float sellEntryPrice = na
var int sellEntryBar = na
var int sellEntryTime = na
var float sellStopLoss = na
var float sellPositionSize = na

var float entryPrice = na
var int entryBar = na
var int entryTime = na
var float positionSize = na


// Indicator details



buy_d_h = input.bool(false, "Buy C D n H")
src = input.source(close, 'Source')
h = input.float(8., 'Lookback Window', minval=3., tooltip='The number of bars used for the estimation. This is a sliding value that represents the most recent historical bars. Recommended range: 3-50')
r = input.float(8., 'Relative Weighting', step=0.25, tooltip='Relative weighting of time frames. As this value approaches zero, the longer time frames will exert more influence on the estimation. As this value approaches infinity, the behavior of the Rational Quadratic Kernel will become identical to the Gaussian kernel. Recommended range: 0.25-25')
x_0 = input.int(25, "Start Regression at Bar", tooltip='Bar index on which to start regression. The first bars of a chart are often highly volatile, and omission of these initial bars often leads to a better overall fit. Recommended range: 5-25')
smoothColors = input.bool(false, "Smooth Colors", tooltip="Uses a crossover based mechanism to determine colors. This often results in less color transitions overall.", inline='1', group='Colors')

lag = input.int(2, "Lag", tooltip="Lag for crossover detection. Lower values result in earlier crossovers. Recommended range: 1-2", inline='1', group='Colors')
size = array.size(array.from(src)) // size of the data series
// size_d = array.size(array.from(src_d))

// Further Reading:
// The Kernel Cookbook: Advice on Covariance functions. David Duvenaud. Published June 2014.
// Estimation of the bandwidth parameter in Nadaraya-Watson kernel non-parametric regression based on universal threshold level. Ali T, Heyam Abd Al-Majeed Hayawi, Botani I. Published February 26, 2021.
kernel_regression(_src, _size, _h) =>
    float _currentWeight = 0.
    float _cumulativeWeight = 0.
    for i = 0 to _size + x_0
    // for i = 0 to _size + x_0
        y = _src[i] 
        w = math.pow(1 + (math.pow(i, 2) / ((math.pow(_h, 2) * 2 * r))), -r)
        _currentWeight += y*w
        _cumulativeWeight += w
    _currentWeight / _cumulativeWeight

// plot(size,color = color.green)
// Estimations
yhat1 = kernel_regression(src, size, h)


kernelEstimate = yhat1
// Kernel Rates of Change
bool isBearishRate = yhat1[1] > yhat1
bool isBullishRate = yhat1[1] < yhat1

c_green = color.new(#009988, 20)
c_red = color.new(#CC3311, 20)

// Kernel Crossovers
color colorByRate = isBullishRate ? c_green : c_red
plot(kernelEstimate, color=colorByRate, linewidth=2, title="Kernel Regression Estimate")

isBullish = isBullishRate
isBearish =  isBearishRate

// isEarlySignalFlip = ta.change(signal) and (ta.change(signal[1]) or ta.change(signal[2]) or ta.change(signal[3]) or ta.change(signal[4]))

isEarlySignalFlip = false
// ===========================
// ==== Entries and Exits ====
// ===========================
goLong = doLongs and isBullish and (not isEarlySignalFlip) 
goShort = doShorts and isBearish and (not isEarlySignalFlip)

// --------- ----------------- ----------------- ----------------- --------------
// --------- ----------------- ----------------- ----------------- --------------
// ---------- Following need to be calculated based on the logic ----------------
// --------- ----------------- ----------------- ----------------- --------------
// --------- ----------------- ----------------- ----------------- --------------
buy_signal =  goLong and na(buyPositionSize) and withinTime
sell_signal =  goShort and na(sellPositionSize) and withinTime


exit_buy = ((isBearish and withinTime) or(low<buyStopLoss)) and not na(buyPositionSize)
exit_sell = ((isBullish and withinTime) or (high>sellStopLoss)) and not na(sellPositionSize)

isExiting = exit_buy or exit_sell

if isExiting
    exitPrice := exit_buy ? ( low < buyStopLoss ? math.min(open, buyStopLoss) : close)  : (high > sellStopLoss ? math.max(open, sellStopLoss) : close)

if buy_signal
    buyStopLoss := low

if sell_signal
    sellStopLoss := high

// ------------------- Dashboard Variables --------------------
var int totalTimeBlocked = 0
var int lastTradeTimeBlocked = na

// Dashboard variables
var float bookedProfit = 0.0
var float grossProfit = 0.0  
var float grossLoss = 0.0  
var float percentGrossProfit = 0.0
var float percentGrossLoss = 0.0
var int totalTrades = 0
var float lastTradeProfit = na

var int numWinningTrades = 0
var int numLosingTrades = 0
var float maxDownside = 0.0
var float maxUpside = 0.0
var float currentDownSide = 0.0
var int winStreak = 0
var int loseStreak = 0
var int timeBlockedBuyHold = 0
var float profitFactor = 0.0

var int maxLoseStreak = 0
var int maxWinStreak = 0

// Dashboard Text and Title
var string dashTitle = "Trade Dashboard\n"
splitter = "----------------------------", nl = "\n"

// ------------------- Helper Functions -----------------------

// Function to format numbers with commas
formatWithCommas(x) =>
    rounded = math.round(x, 0)  // Round to 2 decimal places
    s = str.tostring(rounded)
    len = str.length(s)
    formatted = ""
    counter = 0
    for i = len - 1 to 0
        if (counter % 3 == 0 and counter != 0)
            formatted := "," + formatted
        char_at_i = str.substring(s, i, i+1)
        formatted := char_at_i + formatted
        counter := counter + 1
    // Trimming if string is too long
    maxLen = 20  // Set your max length here
    if (str.length(formatted) > maxLen)
        formatted := str.substring(formatted, 0, maxLen-3) + "..."
    formatted


// Initialize Line
f_drawLine(_x1, _y1, _x2, _y2, _col) =>
     _id = line.new(_x1, _y1, _x2, _y2, style=line.style_arrow_right, color=_col, width=2)



// ------------------- Main Execution -------------------------




if isExiting
    exitBar   := bar_index
    exitTime := time
    
    positionSize := exit_buy ? buyPositionSize : sellPositionSize
    entryPrice := exit_buy ? buyEntryPrice : sellEntryPrice
    entryTime := exit_buy ? buyEntryTime : sellEntryTime
    entryBar := exit_buy ? buyEntryBar : sellEntryBar
    

    currentTradeProfit := (positionSize * exitPrice) - (positionSize * entryPrice) 

    if exit_sell
        currentTradeProfit := -currentTradeProfit
    buyStopLoss := na
    sellStopLoss := na
    
    equity    := equity + currentTradeProfit
    lastTradeProfit := math.round(currentTradeProfit, 2)
    bookedProfit := bookedProfit + lastTradeProfit

    
    totalTrades := totalTrades + 1
    lastTradeTimeBlocked := exitTime - entryTime
    timeBlockedBuyHold := exitTime - initialTime
    totalTimeBlocked := totalTimeBlocked + lastTradeTimeBlocked
    
    if currentTradeProfit > 0
        grossProfit:= grossProfit + currentTradeProfit
        numWinningTrades := numWinningTrades + 1
        maxUpside := math.max(maxUpside, currentTradeProfit)
        winStreak := winStreak + 1
        loseStreak := 0
        if winStreak > maxWinStreak
            maxWinStreak := winStreak

    if currentTradeProfit < 0
        grossLoss := math.abs(grossLoss) + math.abs(currentTradeProfit)
        numLosingTrades := numLosingTrades + 1
        maxDownside := math.min(maxDownside, currentTradeProfit)
        loseStreak := loseStreak + 1
        winStreak := 0
        if loseStreak > maxLoseStreak
            maxLoseStreak := loseStreak
    
    if grossLoss > 0
        profitFactor := math.abs(float(grossProfit) / float(grossLoss))


//Calculating buy and hold returns
if withinTime
    
    if (na(initialPrice))
        initialPrice := na(initialPrice) ? close : initialPrice
        initialTime := na(initialTime) ? time : initialTime
        label.new(bar_index, close, yloc=yloc.abovebar, text="Start", color=color.white, size=size.large, textalign =  text.align_left)
    else
        buyAndHoldProfit := (close - initialPrice) * INITIALCAPITAL
        buyAndHoldPercentProfit := ((close - initialPrice) / initialPrice) * 100
    


// ------------------- Draw label for current Trade -------------------------
if not na(currentTradeProfit)
    if(showTradeArraws)
        f_drawLine(entryBar, entryPrice, exitBar, exitPrice, currentTradeProfit > 0 ? color.green : color.red)
    label_color = currentTradeProfit > 0 ? color.green : color.red
    tradePercentProfit = (currentTradeProfit / tradeSize) * 100
    currentTradePercentProfit = str.tostring(math.round(tradePercentProfit, 2)) + "%"  // Round to 2 decimal places and add the % sign

    labelText = ""
    // Append individual lines of text to the label text string
    labelText := labelText + "Profit (%): " + currentTradePercentProfit + nl
    labelText := labelText + "P/L: " + formatWithCommas(currentTradeProfit) + nl
    labelText := labelText + smallSplitter + nl 
    labelText := labelText + "TradeSize: " + formatWithCommas(tradeSize) + nl
    labelText := labelText + "New Capital: " + formatWithCommas(equity) + nl
    labelText := labelText + "Qty (%): " + str.tostring(qty) + nl
    labelText := labelText + "Entry: " + formatWithCommas(entryPrice) + nl
    labelText := labelText + "Exit: " + formatWithCommas(exitPrice) + nl
    labelText := labelText + smallSplitter + nl 
    labelText := labelText + "Blocked Time: " + str.tostring(formatWithCommas(lastTradeTimeBlocked/dayFactor)) + nl
    
    if(showTradeLabels)
        label.new(exitBar, exitPrice, yloc=yloc.abovebar, text=labelText, color=label_color, size=size.small, textalign =  text.align_left)
    

    exitPrice    := na
    exitBar      := na
    currentTradeProfit    := na
    if exit_buy
        buyEntryBar     := na
        buyEntryPrice   := na
        buyPositionSize := na
    else
        sellEntryBar     := na
        sellEntryPrice   := na
        sellPositionSize := na

    // Entry logic
if buy_signal
    buyEntryPrice   := close
    buyEntryBar     := bar_index
    buyEntryTime := time
    buyStopLoss := low
    buyPositionSize := tradeSize / buyEntryPrice

if sell_signal
    sellEntryPrice := close
    sellEntryBar := bar_index
    sellEntryTime := time
    sellStopLoss := high
    sellPositionSize := tradeSize / sellEntryPrice

// The following can be used to stream signals to a backtest adapter
BacktestBuySell = switch 
    buy_signal => 1
    sell_signal => 2
    => 3
BacktestExitLongShort = switch 
    exit_buy => 1
    exit_sell => 2
    => 3

plot(BacktestBuySell, "Backtest: Enter", display=display.none)
plot(BacktestExitLongShort, "Backtest: Exit", display=display.none)

plot(buyStopLoss, title = "Buy StopLoss Line", style=plot.style_steplinebr)
plot(sellStopLoss, color=color.yellow, title = "Sell StopLoss Line", style=plot.style_steplinebr)


// plot(initialTime, title = "initTime", style=plot.style_steplinebr)
// plot(timeBlockedBuyHold, title = "buy n hold time", style=plot.style_steplinebr)
// ------------------- Main Dashboard Creation -------------------------

// Variables for Dashboard
var float percentProfit = 0.0
var totalProfit = 0.0



if not na(buyPositionSize)
    currentTradeProfit := (buyPositionSize * close) - (buyPositionSize * entryPrice) 
    totalProfit := bookedProfit + currentTradeProfit
else
    totalProfit := bookedProfit
percentProfit := ( totalProfit/ INITIALCAPITAL) * 100
percentProfit := math.round(percentProfit, 2)

// plot(totalProfit, title = "Total Profit", style=plot.style_steplinebr, color=color.green)
// plot(bookedProfit, title = "Booked Profit", style=plot.style_steplinebr, color=color.yellow)
// plot(currentTradeProfit, title = "Current Trade Profit", style=plot.style_steplinebr, color=color.red)

// Initialize Table
init_table() =>
    c_transparent = color.new(color.black, 100)
    table.new(position.top_right, columns=2, rows=22, frame_color=color.new(color.black, 100), frame_width=1, border_width=1, border_color=c_transparent)

// Update Table
update_table(tbl) =>
    c_transparent = color.new(color.black, 100)
    // Header
    table.cell(tbl, row= 0,column =  0,text= "Dashboard", text_halign=text.align_center, text_color=color.white, text_size=size.small)
    
    // First Block
    table.cell(tbl, row= 1,column =  0,text= "Init Capital", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 1,column =  1,text= str.tostring(formatWithCommas(INITIALCAPITAL)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 2,column =  0,text= "Cur Capital", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 2,column =  1,text= str.tostring(formatWithCommas(tradeSize)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 3,column =  0,text= "Qty/trade", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 3,column =  1,text= str.tostring(formatWithCommas(qty)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    // Second Block
    table.cell(tbl, row= 4,column =  0,text= "Total Profit", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 4,column =  1,text= str.tostring(formatWithCommas(bookedProfit)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 5,column =  0,text= "Strategy PnL %", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 5,column =  1,text= str.tostring(formatWithCommas(percentProfit)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 6,column =  0,text= "Buy&Hold PnL %", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 6,column =  1,text= str.tostring(formatWithCommas(buyAndHoldPercentProfit)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Third Block
    table.cell(tbl, row= 7,column =  0,text= "Total Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 7,column =  1,text= str.tostring(totalTrades), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 8,column =  0,text= "Num Winning Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 8,column =  1,text= str.tostring(formatWithCommas(numWinningTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 9,column =  0,text= "Num Losing Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 9,column =  1,text= str.tostring(formatWithCommas(numLosingTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 10,column =  0,text= "Accuracy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 10,column =  1,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 11,column =  0,text= str.tostring(formatWithCommas(numLosingTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 11,column =  1,text= "Accuracy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 12,column =  0,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 12,column =  1,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
        // Fourth Block
    table.cell(tbl,row= 11,column= 0,text= "Profit Factor", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 11,column= 1,text= str.tostring(math.round(profitFactor, 2)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 12,column= 0,text= "Gross Profit", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 12,column= 1,text= str.tostring(formatWithCommas(grossProfit)) + " (" + str.tostring(formatWithCommas(100 * (grossProfit / bookedProfit))) + " %)", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 13,column= 0,text= "Gross Loss", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 13,column= 1,text= str.tostring(formatWithCommas(grossLoss)) + " (" + str.tostring(formatWithCommas(100 * (grossLoss / bookedProfit))) + " %)", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Fifth Block
    table.cell(tbl,row= 14,column= 0,text= "Winning Streak", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 14,column= 1,text= str.tostring(formatWithCommas(maxWinStreak)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 15,column= 0,text= "Losing Streak", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 15,column= 1,text= str.tostring(formatWithCommas(maxLoseStreak)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 16,column= 0,text= "Max Loss/Trade", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 16,column= 1,text= str.tostring(formatWithCommas(-1.0*maxDownside)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 17,column= 0,text= "Max Profit/Trade", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 17,column= 1,text= str.tostring(formatWithCommas(maxUpside)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 18,column= 0,text= "Max Downside", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 18,column= 1,text= str.tostring(formatWithCommas(maxDownSideOverall)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Sixth Block
    table.cell(tbl,row= 19,column= 0,text= "TimeBlocked", text_halign=text.align_center, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 20,column= 0,text= "Strategy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 20,column= 1,text= str.tostring(formatWithCommas(totalTimeBlocked / dayFactor)) + " days", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 21,column= 0,text= "Buy&Hold", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 21,column= 1,text= str.tostring(formatWithCommas(timeBlockedBuyHold / dayFactor)) + " days", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

// Create and Update Table
if (barstate.islast and showDashboard)
    tbl = init_table()
    update_table(tbl)