//@version=5
strategy("NEW JD.REG 2.0", overlay = true, max_lines_count=500,process_orders_on_close=true)


// in this version V3, just cleaned up the code, however more cleaning and testing is required.
// ------------------ Constants and Inputs -------------------
INITIALCAPITAL = 100000
qty_type                = "Percent"
qty                     = 100
dayFactor = (60*60*24*1000)
smallSplitter = "--------"

startDate = input.time(timestamp("2015-01-01"), title="Start Date")
endDate = input.time(timestamp("2023-12-31"), title="End Date")
withinTime = time >= startDate and time <= endDate
doLongs = input.bool(defval=true, title="Do Longs")
doShorts = input.bool(defval=false, title="Do Shorts")
showTradeLabels = input.bool(defval=false, title="Show Each Trade Label")
showDashboard = input.bool(defval=true, title="Show  Dashboard")
showTradeArraws = input.bool(defval=true, title="Show  Trade Arrows")
showStoplosses = input.bool(defval=false, title="Show Stop Losses")

// ------------------ Indicators and Calculations -------------------


// Use the security function to access the close of the specified timeframe
// src = request.security(syminfo.tickerid, customTimeframe, close)
// src_d = request.security(syminfo.tickerid, "D", close)
buy_d_h = input.bool(false, "Buy C D n H")
src = input.source(close, 'Source')
h = input.float(8., 'Lookback Window', minval=3., tooltip='The number of bars used for the estimation. This is a sliding value that represents the most recent historical bars. Recommended range: 3-50')
r = input.float(8., 'Relative Weighting', step=0.25, tooltip='Relative weighting of time frames. As this value approaches zero, the longer time frames will exert more influence on the estimation. As this value approaches infinity, the behavior of the Rational Quadratic Kernel will become identical to the Gaussian kernel. Recommended range: 0.25-25')
x_0 = input.int(25, "Start Regression at Bar", tooltip='Bar index on which to start regression. The first bars of a chart are often highly volatile, and omission of these initial bars often leads to a better overall fit. Recommended range: 5-25')
smoothColors = input.bool(false, "Smooth Colors", tooltip="Uses a crossover based mechanism to determine colors. This often results in less color transitions overall.", inline='1', group='Colors')

lag = input.int(2, "Lag", tooltip="Lag for crossover detection. Lower values result in earlier crossovers. Recommended range: 1-2", inline='1', group='Colors')
size = array.size(array.from(src)) // size of the data series
// size_d = array.size(array.from(src_d))

// Further Reading:
// The Kernel Cookbook: Advice on Covariance functions. David Duvenaud. Published June 2014.
// Estimation of the bandwidth parameter in Nadaraya-Watson kernel non-parametric regression based on universal threshold level. Ali T, Heyam Abd Al-Majeed Hayawi, Botani I. Published February 26, 2021.
kernel_regression(_src, _size, _h) =>
    float _currentWeight = 0.
    float _cumulativeWeight = 0.
    for i = 0 to _size + x_0
    // for i = 0 to _size + x_0
        y = _src[i] 
        w = math.pow(1 + (math.pow(i, 2) / ((math.pow(_h, 2) * 2 * r))), -r)
        _currentWeight += y*w
        _cumulativeWeight += w
    _currentWeight / _cumulativeWeight

kernel_regression_day(_src, _size, _h) =>
    float _currentWeight = 0.
    float _cumulativeWeight = 0.
    t=0
    for i = 0 to _size + x_0
    // for i = 0 to _size + x_0
        y = _src[t]
        w = math.pow(1 + (math.pow(i, 2) / ((math.pow(_h, 2) * 2 * r))), -r)
        _currentWeight += y*w
        _cumulativeWeight += w
        t := t + 7
    _currentWeight / _cumulativeWeight



plot(size,color = color.green)
// Estimations
yhat1 = kernel_regression(src, size, h)
yhat2 = kernel_regression(src, size, h-lag)

yhat1_d = kernel_regression_day(src, size, h)
yhat2_d = kernel_regression_day(src, size, h-lag)
// plot(size)
// plot(size_d)


// yhat1_d = kernel_regression_day(src, size, h)
// plot(yhat1_d)

// Rates of Change
bool wasBearish = yhat1[2] > yhat1[1]
bool wasBullish = yhat1[2] < yhat1[1]
bool isBearish = yhat1[1] > yhat1
bool isBullish = yhat1[1] < yhat1
bool isBearishChange = isBearish and wasBullish
bool isBullishChange = isBullish and wasBearish

// Crossovers
bool isBullishCross = ta.crossover(yhat2, yhat1)
bool isBearishCross = ta.crossunder(yhat2, yhat1) 
bool isBullishSmooth = yhat2 > yhat1
bool isBearishSmooth = yhat2 < yhat1

// Colors
color c_bullish = input.color(#59ff00, 'Bullish Color', group='Colors')
color c_bearish = input.color(#FD1707, 'Bearish Color', group='Colors')
color colorByCross = isBullishSmooth ? c_bullish : c_bearish
color colorByRate = isBullish ? c_bullish : c_bearish
color plotColor = smoothColors ? colorByCross : colorByRate
buy_signal = false
sell_signal = false
if buy_d_h
    buy_signal:= isBullish
    sell_signal:= not isBullish
    // buy_signal:= isBullishChange
    // sell_signal:= not isBullishChange
else
    buy_signal:=close > yhat1
    sell_signal:= close < yhat1 



// sell_signal = close < yhat1 or close < yhat1_d



var float stoploss = na

if strategy.position_size==0
    stoploss:=low

if buy_signal and na(stoploss)
    stoploss:=low

if sell_signal
    stoploss:=na

plot(stoploss)

plot(yhat1,color=color.yellow)
plot(yhat2,color=color.orange)
// plot(yhat1_d,color=color.rgb(0, 255, 225))



// Plot
plot(yhat1, "Rational Quadratic Kernel Estimate", color=plotColor, linewidth=2)

goLong = buy_signal
exitLong = sell_signal

if withinTime
    // if goLong!=exitLong
    strategy.entry("Buy",strategy.long,when=goLong)
    // stop_loss_percent = 0.5
    // stop_loss_price = close * (1 - stop_loss_percent / 100)

    // if exitLong
    //     has_open_position = false
    strategy.exit("Stop loss",from_entry="Buy",stop=stoploss)


    strategy.close("Buy",when=exitLong)





// ------------------- Trade Management -----------------------
var float currentTradeProfit     = na
var float openProfit    = na
var float positionSize  = na 
var float equity        = INITIALCAPITAL + nz(currentTradeProfit) + nz(openProfit)
var int entryBar        = na
var int exitBar = na
var float entryPrice = na
var float exitPrice = na
var int entryTime = na
var int exitTime = na
var float initialPrice = na
var int initialTime = na
var float buyAndHoldProfit = na
var float buyAndHoldPercentProfit = na
tradeSize               = (qty / 100.0) * (equity - nz(openProfit))

// ------------------- Dashboard Variables --------------------


var int totalTimeBlocked = 0
var int lastTradeTimeBlocked = na

// Dashboard variables
var float totalProfit = 0.0
var float grossProfit = 0.0  
var float grossLoss = 0.0  
var float percentGrossProfit = 0.0
var float percentGrossLoss = 0.0
var int totalTrades = 0
var float lastTradeProfit = na

var int numWinningTrades = 0
var int numLosingTrades = 0
var float maxDownside = 0.0
var float maxUpside = 0.0
var int winStreak = 0
var int loseStreak = 0
var int timeBlockedBuyHold = 0
var float profitFactor = 0.0

var int maxLoseStreak = 0
var int maxWinStreak = 0

// Dashboard Text and Title
var string dashTitle = "Trade Dashboard\n"
splitter = "----------------------------", nl = "\n"

// ------------------- Helper Functions -----------------------

// Function to format numbers with commas
formatWithCommas(x) =>
    rounded = math.round(x, 0)  // Round to 2 decimal places
    s = str.tostring(rounded)
    len = str.length(s)
    formatted = ""
    counter = 0
    for i = len - 1 to 0
        if (counter % 3 == 0 and counter != 0)
            formatted := "," + formatted
        char_at_i = str.substring(s, i, i+1)
        formatted := char_at_i + formatted
        counter := counter + 1
    // Trimming if string is too long
    maxLen = 20  // Set your max length here
    if (str.length(formatted) > maxLen)
        formatted := str.substring(formatted, 0, maxLen-3) + "..."
    formatted


// Initialize Line
f_drawLine(_x1, _y1, _x2, _y2, _col) =>
     _id = line.new(_x1, _y1, _x2, _y2, style=line.style_arrow_right, color=_col, width=2)



// ------------------- Main Execution -------------------------
if withinTime

    // Entry logic
    if goLong and na(positionSize)
        initialPrice := na(initialPrice) ? open : initialPrice
        initialTime := na(initialTime) ? entryTime : initialTime
        entryPrice   := close
        entryBar     := bar_index
        entryTime := time
        positionSize := tradeSize / entryPrice

    // Exit logic
    if exitLong and not na(positionSize)
        exitPrice := close
        exitBar   := bar_index
        exitTime := time
        currentTradeProfit := (positionSize * exitPrice) - (positionSize * entryPrice) 
        equity    := equity + currentTradeProfit

        lastTradeProfit := math.round(currentTradeProfit, 2)
        totalProfit := totalProfit + lastTradeProfit
        totalTrades := totalTrades + 1
        lastTradeTimeBlocked := exitTime - entryTime
        timeBlockedBuyHold := exitTime - initialTime
        totalTimeBlocked := totalTimeBlocked + lastTradeTimeBlocked

    if (not na(initialPrice))
        buyAndHoldProfit := (close - initialPrice) * INITIALCAPITAL
        buyAndHoldPercentProfit := ((close - initialPrice) / initialPrice) * 100
    
    if currentTradeProfit > 0
        grossProfit:= grossProfit + currentTradeProfit
        numWinningTrades := numWinningTrades + 1
        maxUpside := math.max(maxUpside, currentTradeProfit)
        winStreak := winStreak + 1
        loseStreak := 0
        if winStreak > maxWinStreak
            maxWinStreak := winStreak
        
        
    if currentTradeProfit < 0
        grossLoss := math.abs(grossLoss) + math.abs(currentTradeProfit)
        numLosingTrades := numLosingTrades + 1
        maxDownside := math.min(maxDownside, currentTradeProfit)
        loseStreak := loseStreak + 1
        winStreak := 0
        if loseStreak > maxLoseStreak
            maxLoseStreak := loseStreak
        

    // Calculate Profit Factor
    if grossLoss > 0
        profitFactor := math.abs(float(grossProfit) / float(grossLoss))
    


    


  
    // strategy.close("Buy",when=exitLong)

    // Exit long position
    // strategy.exit("Take Profit/Stop Loss", from_entry="Buy",stop = stop_loss_price)
    
    

plotchar(withinTime and goLong, char="B", location=location.belowbar, color=color.green)
plotchar(withinTime and exitLong, char="S", color=color.red)


// ------------------- Draw label for current Trade -------------------------
if not na(currentTradeProfit)
    f_drawLine(entryBar, entryPrice, exitBar, exitPrice, currentTradeProfit > 0 ? color.green : color.red)
    label_color = currentTradeProfit > 0 ? color.green : color.red
    tradePercentProfit = (currentTradeProfit / tradeSize) * 100
    currentTradePercentProfit = str.tostring(math.round(tradePercentProfit, 2)) + "%"  // Round to 2 decimal places and add the % sign

    labelText = ""
    // Append individual lines of text to the label text string
    labelText := labelText + "Profit (%): " + currentTradePercentProfit + nl
    labelText := labelText + "P/L: " + formatWithCommas(currentTradeProfit) + nl
    labelText := labelText + smallSplitter + nl 
    labelText := labelText + "TradeSize: " + formatWithCommas(tradeSize) + nl
    labelText := labelText + "New Capital: " + formatWithCommas(equity) + nl
    labelText := labelText + "Qty (%): " + str.tostring(qty) + nl
    labelText := labelText + "Entry: " + formatWithCommas(entryPrice) + nl
    labelText := labelText + "Exit: " + formatWithCommas(exitPrice) + nl
    labelText := labelText + smallSplitter + nl 
    labelText := labelText + "Blocked Time: " + str.tostring(formatWithCommas(lastTradeTimeBlocked/dayFactor)) + nl
    
    label.new(exitBar, exitPrice, yloc=yloc.abovebar, text=labelText, color=label_color, size=size.small, textalign =  text.align_left)
    
    // Reset 
    currentTradeProfit    := na
    entryBar     := na
    entryPrice   := na
    exitBar      := na
    exitPrice    := na
    positionSize := na


// ------------------- Main Dashboard Creation -------------------------
// Variables for Dashboard
var float percentProfit = 0.0
percentProfit := (totalProfit / INITIALCAPITAL) * 100
percentProfit := math.round(percentProfit, 2)
var string dashText = na


// Initialize Table
init_table() =>
    c_transparent = color.new(color.black, 100)
    table.new(position.top_right, columns=2, rows=21, frame_color=color.new(color.black, 100), frame_width=1, border_width=1, border_color=c_transparent)

// Update Table
update_table(tbl) =>
    c_transparent = color.new(color.black, 100)
    // Header
    table.cell(tbl, row= 0,column =  0,text= "Dashboard", text_halign=text.align_center, text_color=color.white, text_size=size.small)
    
    // First Block
    table.cell(tbl, row= 1,column =  0,text= "Init Capital", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 1,column =  1,text= str.tostring(formatWithCommas(INITIALCAPITAL)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 2,column =  0,text= "Cur Capital", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 2,column =  1,text= str.tostring(formatWithCommas(tradeSize)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 3,column =  0,text= "Qty/trade", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 3,column =  1,text= str.tostring(formatWithCommas(qty)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    // Second Block
    table.cell(tbl, row= 4,column =  0,text= "Total Profit", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 4,column =  1,text= str.tostring(formatWithCommas(totalProfit)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 5,column =  0,text= "Strategy PnL %", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 5,column =  1,text= str.tostring(formatWithCommas(percentProfit)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 6,column =  0,text= "Buy&Hold PnL %", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 6,column =  1,text= str.tostring(formatWithCommas(buyAndHoldPercentProfit)) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Third Block
    table.cell(tbl, row= 7,column =  0,text= "Total Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 7,column =  1,text= str.tostring(totalTrades), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 8,column =  0,text= "Num Winning Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 8,column =  1,text= str.tostring(formatWithCommas(numWinningTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 9,column =  0,text= "Num Losing Trades", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 9,column =  1,text= str.tostring(formatWithCommas(numLosingTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 10,column =  0,text= "Accuracy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 10,column =  1,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 11,column =  0,text= str.tostring(formatWithCommas(numLosingTrades)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 11,column =  1,text= "Accuracy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 12,column =  0,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl, row= 12,column =  1,text= str.tostring(math.round(100.0 * (numWinningTrades / totalTrades))) + " %", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
        // Fourth Block
    table.cell(tbl,row= 11,column= 0,text= "Profit Factor", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 11,column= 1,text= str.tostring(math.round(profitFactor, 2)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 12,column= 0,text= "Gross Profit", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 12,column= 1,text= str.tostring(formatWithCommas(grossProfit)) + " (" + str.tostring(formatWithCommas(100 * (grossProfit / totalProfit))) + " %)", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 13,column= 0,text= "Gross Loss", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 13,column= 1,text= str.tostring(formatWithCommas(grossLoss)) + " (" + str.tostring(formatWithCommas(100 * (grossLoss / totalProfit))) + " %)", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Fifth Block
    table.cell(tbl,row= 14,column= 0,text= "Winning Streak", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 14,column= 1,text= str.tostring(formatWithCommas(maxWinStreak)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 15,column= 0,text= "Losing Streak", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 15,column= 1,text= str.tostring(formatWithCommas(maxLoseStreak)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 16,column= 0,text= "Max Downside", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 16,column= 1,text= str.tostring(formatWithCommas(maxDownside)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 17,column= 0,text= "Max Upside", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 17,column= 1,text= str.tostring(formatWithCommas(maxUpside)), text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    // Sixth Block
    table.cell(tbl,row= 18,column= 0,text= "TimeBlocked", text_halign=text.align_center, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    
    table.cell(tbl,row= 19,column= 0,text= "Strategy", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 19,column= 1,text= str.tostring(formatWithCommas(totalTimeBlocked / dayFactor)) + " days", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

    table.cell(tbl,row= 20,column= 0,text= "Buy&Hold", text_halign=text.align_left, bgcolor=c_transparent, text_color=color.white, text_size=size.small)
    table.cell(tbl,row= 20,column= 1,text= str.tostring(formatWithCommas(timeBlockedBuyHold / dayFactor)) + " days", text_halign=text.align_right, bgcolor=c_transparent, text_color=color.white, text_size=size.small)

// Create and Update Table
if (barstate.islast)
    tbl = init_table()
    update_table(tbl)